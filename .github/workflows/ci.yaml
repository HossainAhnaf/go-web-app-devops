name: CI
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'helm/**'
  pull_request:
    branches:
      - main 
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
  
      - name: Setup GO
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.7
          
      - name: Installing dependencies 
        run: go mod download
       
      - name: Test
        run: go test ./...
 
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Run golang lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.6

  build:
    name: Build & Upload Artifacts
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Setup GO
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.7

      - name: Installing dependencies 
        run: go mod download

      - name: Build App 
        run: CGO_ENABLED=0 GOOS=linux go build -o main    

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: main 
          
  docker:
    name: Docker Build , Security Scan & Push
    runs-on: ubuntu-latest
    needs: [test, lint]
    env:
      REGISTRY: ghcr.io
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
      image_tag_short: ${{ steps.set_output.outputs.image_tag_short }} 
    steps:
      - uses: actions/checkout@v4
    
      - name: making IMAGE_NAME env variable
        run:  echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
              
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
              
                

      - name: Build docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: prod 
          push: false
          tags: ${{ steps.meta.outputs.tags }}              
          load: true

      - name: set image tag outputs
        id: set_output
        run: |
          # Extract full image reference with sha- tag
          full_ref=$(echo "$DOCKER_METADATA" | jq -r '.tags[] | select(test(":sha-"))' | head -n 1)

          # Extract just the tag (after the last colon)
          full_tag="${full_ref##*:}"
          echo "SHA Image tag: $full_tag"
      
          # Short tag = first 7 chars of the sha
          short_tag=$(echo "$full_tag" | cut -c5-11)
          echo "Short form: $short_tag"
      
          echo "image_tag=$full_tag" >> "$GITHUB_OUTPUT"
          echo "image_tag_short=$short_tag" >> "$GITHUB_OUTPUT"
          
  
      - name: Security Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_output.outputs.image_tag }}'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          vuln-type: 'os,library'      
          
      - name: Push docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          target: prod
          tags: ${{ steps.meta.outputs.tags }}
     

  update-newtag-in-helm-chart:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
    
      - name: Update tag in Helm chart
        id: update-helm
        uses: fjogeleit/yaml-update-action@v0.16.1
        with:
          valueFile: 'helm/go-web-app-chart/values.yaml'
          propertyPath: 'image.tag'         
          value: '${{ needs.docker.outputs.image_tag }}'
          masterBranchName: main
          targetBranch: main
          branch: ci/helm-update-${{ needs.docker.outputs.image_tag }}
          createPR: true
          message: 'ci: update Helm chart image tag to ${{ needs.docker.outputs.image_tag_short }}...'
      
      - name: Enable auto-merge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          pull-request-number: ${{ fromJson(steps.update-helm.outputs.pull_request).number }}
          merge-method: squash
     